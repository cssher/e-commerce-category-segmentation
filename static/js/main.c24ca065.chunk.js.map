{"version":3,"sources":["table/BootTable.js","App.js","serviceWorker.js","index.js"],"names":["categoryName","EcommerceData","map","catName","CATEEGORY_NAME","firstDate","first","First_Transaction_Date","lastDate","last","Last_Transaction_Date","rev","r","Revenue","seg","s","Segment","catFun","date1","date2","this","rowData","i","length","columns","dataField","text","sort","headerStyle","backgroundColor","filter","textFilter","defaultSorted","order","CaptionElement","style","borderRadius","textAlign","color","border","padding","margin","BootTable","caption","keyField","data","pagination","paginationFactory","filterFactory","striped","hover","condensed","wrapperClasses","classes","id","App","props","componentDidMount","totalRevenue","totalCategories","revenueBestSellers","item","parseFloat","indexOf","push","setState","toFixed","averageRevenue","state","segments","segmentData","categories","catData","singleSegmentValue","categoryCount","revenueData","revenuePerSegment","revenueValue","console","log","className","layout","width","height","top","right","left","bottom","strokeDasharray","dataKey","type","horizontalAlign","iconType","fill","label","fontSize","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c24ca065.chunk.js","sourcesContent":["import BootstrapTable from \"react-bootstrap-table-next\";\r\nimport EcommerceData from \"../Assets/ecommerce-data\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\r\nimport filterFactory, { textFilter } from \"react-bootstrap-table2-filter\";\r\nimport React from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst categoryName = EcommerceData.map(catName => catName.CATEEGORY_NAME);\r\nconst firstDate = EcommerceData.map(first => first.First_Transaction_Date);\r\nconst lastDate = EcommerceData.map(last => last.Last_Transaction_Date);\r\nconst rev = EcommerceData.map(r => r.Revenue);\r\nconst seg = EcommerceData.map(s => s.Segment);\r\n\r\nfunction catFun(catName, date1, date2, rev, seg) {\r\n  this.catName = catName;\r\n  this.date1 = date1;\r\n  this.date2 = date2;\r\n  this.rev = rev;\r\n  this.seg = seg;\r\n}\r\n\r\nvar rowData = [];\r\n\r\nfor (var i = 0; i < categoryName.length; i++) {\r\n  rowData[i] = new catFun(\r\n    categoryName[i],\r\n    firstDate[i],\r\n    lastDate[i],\r\n    rev[i],\r\n    seg[i]\r\n  );\r\n}\r\n\r\n// const selectOptionsArr = [\r\n//   {\r\n//     value: 0,\r\n//     label: \"Best Seller\"\r\n//   },\r\n//   {\r\n//     value: 1,\r\n//     label: \"Evergreen\"\r\n//   },\r\n//   {\r\n//     value: 2,\r\n//     label: \"Old Category-No recent demand\"\r\n//   },\r\n//   {\r\n//     value: 3,\r\n//     label: \"New Category\"\r\n//   }\r\n// ];\r\n\r\nconst columns = [\r\n  {\r\n    dataField: \"catName\",\r\n    text: \"Category Name\",\r\n    sort: true,\r\n    headerStyle: {\r\n      backgroundColor: \"#c8e6c9\"\r\n    }\r\n  },\r\n  {\r\n    dataField: \"date1\",\r\n    text: \"First Transaction Date\",\r\n    sort: true,\r\n    headerStyle: {\r\n      backgroundColor: \"#c8e6c9\"\r\n    }\r\n  },\r\n  {\r\n    dataField: \"date2\",\r\n    text: \"Last Transaction Date\",\r\n    sort: true,\r\n    headerStyle: {\r\n      backgroundColor: \"#c8e6c9\"\r\n    }\r\n  },\r\n  {\r\n    dataField: \"rev\",\r\n    text: \"Revenue\",\r\n    sort: true,\r\n    headerStyle: {\r\n      backgroundColor: \"#c8e6c9\"\r\n    }\r\n  },\r\n  {\r\n    dataField: \"seg\",\r\n    text: \"Segment\",\r\n    sort: true,\r\n    filter: textFilter(),\r\n    headerStyle: {\r\n      backgroundColor: \"#c8e6c9\"\r\n    }\r\n  }\r\n];\r\n\r\nconst defaultSorted = [\r\n  {\r\n    dataField: \"catName\",\r\n    order: \"desc\"\r\n  }\r\n];\r\n\r\nconst CaptionElement = () => (\r\n  <h4\r\n    style={{\r\n      borderRadius: \"0.25em\",\r\n      textAlign: \"center\",\r\n      color: \"purple\",\r\n      border: \"1px solid purple\",\r\n      padding: \"0.5em\",\r\n      margin: \"0\"\r\n    }}\r\n  >\r\n    Category Details Table\r\n  </h4>\r\n);\r\n\r\nconst BootTable = function() {\r\n  return (\r\n    <BootstrapTable\r\n      caption={<CaptionElement />}\r\n      keyField=\"id\"\r\n      data={rowData}\r\n      columns={columns}\r\n      defaultSorted={defaultSorted}\r\n      pagination={paginationFactory()}\r\n      filter={filterFactory()}\r\n      striped\r\n      hover\r\n      condensed\r\n      wrapperClasses=\"boo\"\r\n      classes=\"foo\"\r\n      id=\"bar\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default BootTable;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport EcommerceData from \"../src/Assets/ecommerce-data.json\";\nimport {\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar\n} from \"recharts\";\nimport Table from \"./table/Table\";\nimport BootTable from \"./table/BootTable\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      totalRevenue: 0,\n      totalCategories: 0,\n      revenueBestSellers: 0,\n      averageRevenue: 0\n    };\n  }\n\n  componentDidMount = () => {\n    let totalRevenue = 0;\n    let totalCategories = [];\n    let revenueBestSellers = 0;\n\n    EcommerceData.map(item => {\n      totalRevenue += parseFloat(item.Revenue);\n\n      if (totalCategories.indexOf(item.CATEEGORY_NAME) === -1) {\n        totalCategories.push(item.CATEEGORY_NAME);\n      }\n\n      if (item.Segment === \"Best Seller\") {\n        revenueBestSellers += parseFloat(item.Revenue);\n      }\n    });\n\n    this.setState({\n      totalCategories: totalCategories.length,\n      totalRevenue: parseFloat(totalRevenue.toFixed(2)),\n      revenueBestSellers,\n      averageRevenue: parseFloat(\n        (parseFloat(totalRevenue) / totalCategories.length).toFixed(2)\n      )\n    });\n  };\n\n  render() {\n    // number of segments and segments names - extraction\n    let segments = [];\n\n    EcommerceData.map(item => {\n      if (segments.indexOf(item.Segment) === -1) {\n        segments.push(item.Segment);\n      }\n    });\n\n    // number of categories per segment\n    let segmentData = [];\n\n    segments.map(item => {\n      let categories = [];\n\n      EcommerceData.map(catData => {\n        if (catData.Segment === item) {\n          if (categories.indexOf(catData.CATEEGORY_NAME) === -1) {\n            categories.push(catData.CATEEGORY_NAME);\n          }\n        }\n      });\n\n      let singleSegmentValue = {\n        segments: item,\n        categoryCount: categories.length\n      };\n\n      segmentData.push(singleSegmentValue);\n    });\n\n    // revenue per segment\n    let revenueData = [];\n\n    segments.map(item => {\n      let revenuePerSegment = 0;\n\n      EcommerceData.map(catData => {\n        if (catData.Segment === item) {\n          revenuePerSegment += parseFloat(catData.Revenue);\n        }\n      });\n\n      let singleSegmentValue = {\n        segments: item,\n        revenueValue: parseFloat(revenuePerSegment.toFixed(2))\n      };\n\n      revenueData.push(singleSegmentValue);\n    });\n\n    console.log(revenueData);\n\n    return (\n      <div className=\"superContainer\">\n        <header>Product Category Segmentation Report</header>\n        <div className=\"data\">\n          <ul className=\"ul\">\n            <li className=\"li\">Total Revenue : ${this.state.totalRevenue}</li>\n            <li className=\"li\">\n              Total Categories : {this.state.totalCategories}\n            </li>\n            <li className=\"li\">Total Revenue : ${this.state.totalRevenue}</li>\n            <li className=\"li\">\n              Revenue from Best Sellers : ${this.state.revenueBestSellers}\n            </li>\n            <li className=\"li\">\n              Average Revenue : ${this.state.averageRevenue}\n            </li>\n          </ul>\n        </div>\n        <div className=\"MainContainer\">\n          <div className=\"VerticalBar\">\n            <BarChart\n              layout=\"vertical\"\n              width={600}\n              height={250}\n              data={segmentData}\n              margin={{ top: 20, right: 10, left: 50, bottom: 10 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"categoryCount\" type=\"number\" />\n              <YAxis dataKey=\"segments\" type=\"category\" />\n              <Tooltip />\n              <Legend horizontalAlign=\"top\" height={5} iconType=\"circle\" />\n              <Bar dataKey=\"categoryCount\" fill=\"#8884d8\" />\n            </BarChart>\n          </div>\n          <div className=\"HorizontalBar\">\n            <BarChart\n              width={600}\n              height={250}\n              margin={{ top: 20, right: 10, left: 10, bottom: 10 }}\n              data={revenueData}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <YAxis dataKey=\"revenueValue\" />\n              <XAxis dataKey=\"segments\" />\n              <Tooltip />\n              <Legend horizontalAlign=\"top\" height={5} iconType=\"circle\" />\n              <Bar\n                dataKey=\"revenueValue\"\n                fill=\"#8884d8\"\n                label={{ fill: \"red\", fontSize: 20 }}\n              />\n            </BarChart>\n          </div>\n        </div>\n        <div className=\"table-chart\">\n          <BootTable />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}